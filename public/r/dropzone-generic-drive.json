{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropzone-generic-drive",
  "type": "registry:component",
  "title": "Generic Drive Dropzone",
  "description": "Workflow: Inside storage drive applications",
  "dependencies": [
    "zustand",
    "uploadthing",
    "@uploadthing/react",
    "@uploadthing/shared",
    "paralleldrive/cuid2",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "separator"
  ],
  "files": [
    {
      "path": "registry/new-york/dropzone-generic-drive/dropzone-generic-drive.tsx",
      "content": "//////////////////////////////////////////////////////////////////////////////////\r\n// UTUIDropzoneGenericDrive\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\"use client\";\r\n\r\n// Global Imports\r\nimport { createId } from \"@paralleldrive/cuid2\";\r\nimport { useDropzone } from \"@uploadthing/react\";\r\nimport {\r\n  FileSize,\r\n  generateClientDropzoneAccept,\r\n  generatePermittedFileTypes,\r\n} from \"@uploadthing/shared\";\r\nimport { Check, FileUpIcon, Info, Loader2, Trash, Upload } from \"lucide-react\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\n// Local Imports\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { useUploadThing } from \"@/lib/uploadthing\";\r\nimport {\r\n  UTUIFileStatus,\r\n  UTUIFunctionsProps,\r\n  UTUIUploadFile,\r\n} from \"@/lib/uploadthing-ui-types\";\r\nimport { checkFileObjectKey, formatBytes } from \"@/lib/uploadthing-ui-utils\";\r\nimport { useDropzoneGenericDriveStore } from \"@/store/dropzone-generic-drive-store\";\r\n\r\n// Body\r\nexport default function UTUIDropzoneGenericDrive({\r\n  UTUIFunctionsProps,\r\n}: {\r\n  UTUIFunctionsProps: UTUIFunctionsProps;\r\n}) {\r\n  // [1] State and Refs\r\n  const { historicFiles, setFiles, abortAllFiles, resetFiles } =\r\n    useDropzoneGenericDriveStore();\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      setFiles(\r\n        acceptedFiles.map((fileObj) => ({\r\n          id: createId(),\r\n          file: fileObj,\r\n          status: \"pending\" as UTUIFileStatus,\r\n          createdAt: new Date(),\r\n        })),\r\n      );\r\n    },\r\n    [setFiles],\r\n  );\r\n\r\n  // [2] Uploadthing\r\n  const { routeConfig } = useUploadThing(UTUIFunctionsProps.fileRoute);\r\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\r\n    .fileTypes.map((fileType) => {\r\n      if (fileType.includes(\"/\")) {\r\n        return fileType;\r\n      } else {\r\n        return `${fileType}/*`;\r\n      }\r\n    })\r\n    .join(\",\");\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: generateClientDropzoneAccept(\r\n      generatePermittedFileTypes(routeConfig).fileTypes,\r\n    ),\r\n  });\r\n\r\n  // [3] Derived State\r\n  const fileRouteOptions = checkFileObjectKey({\r\n    str: generatePermittedFileTypes(routeConfig).fileTypes[0],\r\n    obj: routeConfig,\r\n  });\r\n\r\n  const allFilesUploaded = historicFiles.every(\r\n    (file) => file.status === \"complete\" || file.status === \"error\",\r\n  );\r\n\r\n  // [4] Conditionals checks\r\n  // If the file route options are not found, display an error message\r\n  if (!fileRouteOptions)\r\n    return (\r\n      <div className=\"flex flex-col gap-4 text-sm\">\r\n        Please add a correct file route\r\n      </div>\r\n    );\r\n\r\n  const maxFileCount = fileRouteOptions.maxFileCount;\r\n  const minFileCount = fileRouteOptions.minFileCount;\r\n  const maxFileSize = fileRouteOptions.maxFileSize;\r\n\r\n  // [5] JSX\r\n  return (\r\n    <div className=\"flex w-full flex-col gap-4 text-sm\">\r\n      <Title />\r\n      <input {...getInputProps()} />\r\n      {/* Limit the file dropzone area */}\r\n      <div\r\n        className=\"flex w-full cursor-pointer flex-wrap items-center justify-center gap-4 rounded-md border px-4 py-2 text-xs\"\r\n        {...getRootProps()}\r\n      >\r\n        <Upload className=\"w-4 stroke-1\" />\r\n        <div className=\"text-center text-muted-foreground\">\r\n          <span className=\"font-semibold\">Drop</span> your files here\r\n        </div>\r\n      </div>\r\n\r\n      <Information\r\n        fileTypes={acceptedFileTypes}\r\n        maxFileCount={maxFileCount}\r\n        minFileCount={minFileCount}\r\n        maxFileSize={maxFileSize}\r\n      />\r\n\r\n      <Separator />\r\n\r\n      {historicFiles.map((fileObj) => {\r\n        return (\r\n          <FileContainer\r\n            key={fileObj.id}\r\n            uploadFile={fileObj}\r\n            UTUIFunctionsProps={UTUIFunctionsProps}\r\n          />\r\n        );\r\n      })}\r\n\r\n      {historicFiles.length > 0 && <Separator />}\r\n\r\n      {allFilesUploaded && historicFiles.length > 0 && (\r\n        <div className=\"flex w-full items-center justify-end\">\r\n          <Button onClick={resetFiles}>Reset All</Button>\r\n        </div>\r\n      )}\r\n\r\n      {!allFilesUploaded && historicFiles.length > 0 && (\r\n        <div className=\"flex w-full items-center justify-end\">\r\n          <Button variant={\"destructive\"} onClick={abortAllFiles}>\r\n            Cancel All\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// File Container\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction FileContainer({\r\n  uploadFile,\r\n  UTUIFunctionsProps,\r\n}: {\r\n  uploadFile: UTUIUploadFile & { abort?: boolean };\r\n  UTUIFunctionsProps: UTUIFunctionsProps;\r\n}) {\r\n  // [1] State & Ref\r\n  const isMounted = useRef(true);\r\n  const hasStartedUpload = useRef(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const { updateFileStatus, removeFile } = useDropzoneGenericDriveStore();\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(\r\n    undefined,\r\n  );\r\n  const [abortSignal, setAbortSignal] = useState<AbortSignal | undefined>(\r\n    undefined,\r\n  );\r\n\r\n  // [2] Uploadthing\r\n  const { startUpload, isUploading } = useUploadThing(\r\n    UTUIFunctionsProps.fileRoute,\r\n    {\r\n      signal: abortSignal,\r\n      uploadProgressGranularity: \"fine\",\r\n      onUploadProgress: (progress) => {\r\n        if (isMounted.current) {\r\n          setProgress(progress);\r\n\r\n          // Your additional code here\r\n          UTUIFunctionsProps.onUploadProgress?.(progress);\r\n        }\r\n      },\r\n      onClientUploadComplete: (res) => {\r\n        if (isMounted.current && res?.[0]) {\r\n          updateFileStatus(uploadFile.id, \"complete\", res[0].url);\r\n\r\n          // Your additional code here\r\n          UTUIFunctionsProps.onClientUploadComplete?.(res);\r\n        }\r\n      },\r\n      onUploadError: (error) => {\r\n        if (isMounted.current) {\r\n          updateFileStatus(uploadFile.id, \"error\");\r\n          setErrorMessage(error.message);\r\n\r\n          // Your additional code here\r\n          UTUIFunctionsProps.onUploadError?.(error);\r\n        }\r\n      },\r\n      onBeforeUploadBegin: (files) => {\r\n        // Create a new AbortController for this upload\r\n        abortControllerRef.current = new AbortController();\r\n        setAbortSignal(abortControllerRef.current.signal);\r\n\r\n        UTUIFunctionsProps.onBeforeUploadBegin?.(files);\r\n\r\n        return files;\r\n      },\r\n      onUploadBegin: UTUIFunctionsProps.onUploadBegin,\r\n    },\r\n  );\r\n\r\n  // [3] Handlers\r\n  const resetAbortController = useCallback(() => {\r\n    if (abortControllerRef.current && abortControllerRef.current.signal) {\r\n      removeFile(uploadFile.id);\r\n      abortControllerRef.current.abort();\r\n      setAbortSignal(abortControllerRef.current.signal);\r\n    }\r\n  }, [abortControllerRef, removeFile, setAbortSignal, uploadFile]);\r\n\r\n  // [4] Effects\r\n  // When a file isn't uploading\r\n  useEffect(() => {\r\n    if (!hasStartedUpload.current && !isUploading) {\r\n      hasStartedUpload.current = true;\r\n\r\n      startUpload([uploadFile.file]);\r\n      updateFileStatus(uploadFile.id, \"uploading\");\r\n    }\r\n  }, [\r\n    uploadFile,\r\n    isUploading,\r\n    hasStartedUpload,\r\n    startUpload,\r\n    updateFileStatus,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // Check if the file has an abort status\r\n    // If it does, abort the upload and remove it from the state\r\n    if (uploadFile.abort) {\r\n      resetAbortController();\r\n    }\r\n  }, [uploadFile, resetAbortController]);\r\n\r\n  // [5] JSX\r\n  return (\r\n    <div className=\"flex h-20 w-full items-center gap-4 rounded-md border\">\r\n      <div className=\"flex h-full min-w-20 items-center justify-center bg-accent\">\r\n        {uploadFile.status === \"pending\" ||\r\n        uploadFile.status === \"uploading\" ? (\r\n          <Loader2 className=\"animate-spin stroke-1\" />\r\n        ) : uploadFile.status === \"error\" ? (\r\n          <Info className=\"stroke-1\" />\r\n        ) : (\r\n          <FileUpIcon className=\"stroke-1\" />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex flex-col gap-1 truncate\">\r\n        <span className=\"truncate\">{uploadFile.file.name}</span>\r\n        <span className=\"h-fit truncate text-xs text-muted-foreground\">\r\n          {formatBytes(uploadFile.file.size)} ({progress}%)\r\n        </span>\r\n        <span className=\"truncate text-xs text-destructive\">\r\n          {errorMessage}\r\n        </span>\r\n      </div>\r\n\r\n      {uploadFile.status === \"complete\" && (\r\n        <div className=\"ml-auto flex min-w-20 items-center justify-center text-chart-2\">\r\n          <Check className=\"w-4 stroke-1\" />\r\n        </div>\r\n      )}\r\n      {uploadFile.status === \"pending\" ||\r\n        (uploadFile.status === \"uploading\" && (\r\n          <div\r\n            className=\"ml-auto flex min-w-20 cursor-pointer items-center justify-center hover:text-destructive\"\r\n            onClick={resetAbortController}\r\n          >\r\n            <Trash className=\"w-4 stroke-1\" />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// Title\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction Title() {\r\n  // [1] JSX\r\n  return (\r\n    <div className=\"font-semibold\">\r\n      Upload files <span className=\"text-destructive\">*</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// Information\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction Information({\r\n  fileTypes,\r\n  maxFileCount,\r\n  minFileCount,\r\n  maxFileSize,\r\n}: {\r\n  fileTypes: string;\r\n  maxFileCount: number;\r\n  minFileCount: number;\r\n  maxFileSize: FileSize;\r\n}) {\r\n  // [1] JSX\r\n  return (\r\n    <div className=\"flex flex-wrap items-center justify-center gap-x-4 gap-y-2 text-xs text-muted-foreground\">\r\n      <span className=\"underline\">Up to {maxFileSize}</span>\r\n      <span className=\"underline\">Allowed files: {fileTypes}</span>\r\n      <span className=\"underline\">Max files: {maxFileCount}</span>\r\n      <span className=\"underline\">Min files: {minFileCount}</span>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadthing-ui/dropzone-generic-drive.tsx"
    },
    {
      "path": "store/dropzone-generic-drive-store.ts",
      "content": "// Global Imports\r\n\r\nimport { UTUIFileStatus, UTUIUploadFile } from \"@/lib/uploadthing-ui-types\";\r\nimport { create } from \"zustand\";\r\n\r\n// Local Imports\r\n\r\n// Body\r\n// [1] Types\r\ninterface FilesState {\r\n  historicFiles: UTUIUploadFile[] & { abort?: boolean };\r\n  setFiles: (newFiles: UTUIUploadFile[]) => void;\r\n  updateFileStatus: (id: string, status: UTUIFileStatus, url?: string) => void;\r\n  removeFile: (id: string) => void;\r\n  resetFiles: () => void;\r\n  abortAllFiles: () => void;\r\n}\r\n\r\n// [2] Store\r\nexport const useDropzoneGenericDriveStore = create<FilesState>()((set) => ({\r\n  historicFiles: [],\r\n  setFiles: (newFiles) =>\r\n    set((state) => {\r\n      // Check if the file is already in the historicFiles array. If not, add it as well\r\n      const newHistoricFiles = Array.from(newFiles).filter(\r\n        (file) =>\r\n          !state.historicFiles.some(\r\n            (historicFile) => historicFile.id === file.id,\r\n          ),\r\n      );\r\n\r\n      return {\r\n        files: newFiles,\r\n        historicFiles: [...state.historicFiles, ...newHistoricFiles],\r\n      };\r\n    }),\r\n  updateFileStatus: (id, status, url) =>\r\n    set((state) => ({\r\n      historicFiles: state.historicFiles.map((item) =>\r\n        item.id === id ? { ...item, status, url } : item,\r\n      ),\r\n    })),\r\n  removeFile: (id) =>\r\n    set((state) => ({\r\n      historicFiles: state.historicFiles.filter((item) => item.id !== id),\r\n    })),\r\n  resetFiles: () =>\r\n    set({\r\n      historicFiles: [],\r\n    }),\r\n  abortAllFiles: () =>\r\n    set((state) => ({\r\n      historicFiles: state.historicFiles.map((item) => ({\r\n        ...item,\r\n        abort: true,\r\n      })),\r\n    })),\r\n}));\r\n",
      "type": "registry:file",
      "target": "store/dropzone-generic-drive-store.ts"
    },
    {
      "path": "lib/uploadthing-ui-types.ts",
      "content": "import { Json, MaybePromise, UploadThingError } from \"@uploadthing/shared\";\r\nimport { ClientUploadedFileData, EndpointArg } from \"uploadthing/types\";\r\n\r\nexport type UTUIFileStatus = \"pending\" | \"uploading\" | \"complete\" | \"error\";\r\n\r\nexport interface UTUIUploadFile {\r\n  id: string;\r\n  file: File;\r\n  status: UTUIFileStatus;\r\n  url?: string;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface UTUIFunctionsProps {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  fileRoute: EndpointArg<any, any>;\r\n  onUploadProgress?: (progress: number) => void;\r\n  onClientUploadComplete?:\r\n    | ((\r\n        res: ClientUploadedFileData<{\r\n          uploadedBy: string;\r\n        }>[],\r\n      ) => MaybePromise<void>)\r\n    | undefined;\r\n  onUploadError?: (error: UploadThingError<Json>) => void;\r\n  onBeforeUploadBegin?:\r\n    | ((files: File[]) => Promise<File[]> | File[])\r\n    | undefined;\r\n  onUploadBegin?: ((fileName: string) => void) | undefined;\r\n}\r\n",
      "type": "registry:file",
      "target": "lib/uploadthing-ui-types.ts"
    },
    {
      "path": "lib/uploadthing-ui-utils.ts",
      "content": "import { ExpandedRouteConfig, FileRouterInputKey } from \"@uploadthing/shared\";\r\n\r\n// Converts the size into readable format\r\nexport function formatBytes(bytes: number, decimals = 1) {\r\n  if (bytes === 0) return \"0 B\";\r\n  if (bytes < 0) return \"Invalid size\";\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return `${parseFloat((bytes / k ** i).toFixed(dm))} ${sizes[i]}`;\r\n}\r\n\r\n// Return the amount of file uploaded\r\nexport function getUploadedAmount(progress: number, fileSize: number) {\r\n  const uploadedAmount = (progress / 100) * fileSize;\r\n  return formatBytes(uploadedAmount);\r\n}\r\n\r\n// Capitalize the first letter\r\nexport function capitalizeFirstLetter(string: string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n// Return the objects value\r\nexport function checkFileObjectKey({\r\n  str,\r\n  obj,\r\n}: {\r\n  str: FileRouterInputKey | undefined;\r\n  obj: ExpandedRouteConfig | undefined;\r\n}) {\r\n  if (!str || !obj) return null;\r\n\r\n  if (obj && typeof obj === \"object\" && obj.hasOwnProperty(str)) {\r\n    return obj[str];\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n",
      "type": "registry:file",
      "target": "lib/uploadthing-ui-utils.ts"
    }
  ]
}